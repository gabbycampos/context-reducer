{"version":3,"sources":["reducers/taskReducer.js","contexts/TaskContext.js","contexts/AuthContext.js","components/Navbar.js","components/TaskForm.js","components/TaskDetails.js","components/TaskList.js","reducers/memberReducer.js","contexts/MemberContext.js","components/MemberDetails.js","components/MemberList.js","components/NewMemberForm.js","App.js","serviceWorker.js","index.js"],"names":["taskReducer","state","action","type","title","task","creator","id","uuidv1","filter","TaskContext","createContext","TaskContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","tasks","dispatch","useEffect","setItem","stringify","Provider","value","children","AuthContext","AuthContextProvider","isAuthenticated","toggleAuth","setState","this","Component","Navbar","useContext","className","onClick","length","NewTaskForm","useState","setTitle","setCreator","onSubmit","e","preventDefault","placeholder","onChange","target","required","TaskDetails","TaskList","map","key","memberReducer","name","member","MemberContext","MemberContextProvider","members","MemberDetails","MembersList","NewMemberForm","setName","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1b6ff831.chunk.js","sourcesContent":["import { v1 as uuidv1 } from 'uuid';\n\nexport const taskReducer = (state, action) => {\n    switch (action.type) {\n        case 'ADD_TASK':\n            return [...state, {\n                title: action.task.title,\n                creator: action.task.creator,\n                id: uuidv1()\n            }]\n        case 'REMOVE_TASK':\n            return state.filter(task => task.id !== action.id);\n        default:\n            return state\n    }\n}\n\n// reducers - method of changing state in a single function(reducer)\n// 2 functions here - addTask and removeTask\n\n// Reducer Function - iteracts with state/data\n// Action - describes type of change in reducer function\n// Dispatch - sends action to reducer","import React, { createContext, useReducer, useEffect } from 'react';\nimport { taskReducer } from '../reducers/taskReducer';\n\nexport const TaskContext = createContext();\n\nconst TaskContextProvider = (props) => {\n    const [tasks, dispatch] = useReducer(taskReducer, [], () => {\n        const localData = localStorage.getItem('tasks');\n        return localData ? JSON.parse(localData) : [];\n    });\n    useEffect(() => {\n        localStorage.setItem('tasks', JSON.stringify(tasks))\n    }, [tasks])\n    return (\n        <TaskContext.Provider value={{ tasks, dispatch }}>\n            {props.children}\n        </TaskContext.Provider>\n    )\n}\n\nexport default TaskContextProvider;","import React, { Component, createContext } from 'react'\n\nexport const AuthContext = createContext();\n\nexport default class AuthContextProvider extends Component {\n    state = {\n        isAuthenticated: false\n    }\n\n    toggleAuth = () => {\n        this.setState({ isAuthenticated: !this.state.isAuthenticated })\n    }\n\n    render() {\n        return (\n            <AuthContext.Provider value={{ ...this.state, toggleAuth: this.toggleAuth }}>\n                {this.props.children}\n            </AuthContext.Provider>\n        )\n    }\n}\n","import React, { useContext } from 'react';\nimport { AuthContext } from '../contexts/AuthContext';\nimport { TaskContext } from '../contexts/TaskContext';\n\nconst Navbar = () => {\n    const { isAuthenticated, toggleAuth } = useContext(AuthContext);\n    const { tasks } = useContext(TaskContext);\n\n    return (\n        <div className=\"navbar\">\n            <nav>\n                <div className=\"log\" onClick={toggleAuth}>\n                    {isAuthenticated ? 'Logged in' : 'Logged out'}\n                </div>\n                <p>You currently have {tasks.length} items to complete...</p>\n            </nav>\n        </div>\n    )\n}\nexport default Navbar;\n\n","import React, { useContext, useState } from 'react';\nimport { TaskContext } from '../contexts/TaskContext';\n\nconst NewTaskForm = () => {\n    const { dispatch } = useContext(TaskContext);\n    const [title, setTitle] = useState('');\n    const [creator, setCreator] = useState('');\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        dispatch({\n            type: 'ADD_TASK', task: {\n                title, creator\n            }\n        });\n        setTitle('');\n        setCreator('');\n    }\n\n    return (\n        <div className=\"form-bg\">\n            <h1>Make the list...</h1>\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"enter task\" value={title}\n                    onChange={(e) => setTitle(e.target.value)} required />\n\n                <input type=\"text\" placeholder=\"enter creator\" value={creator}\n                    onChange={(e) => setCreator(e.target.value)} required />\n\n                <input className=\"button-form\" type=\"submit\" value=\"add task\" />\n            </form>\n        </div>\n    );\n}\n\nexport default NewTaskForm;","import React, { useContext } from 'react';\nimport { TaskContext } from '../contexts/TaskContext';\n\nconst TaskDetails = ({ task }) => {\n    const { dispatch } = useContext(TaskContext);\n    return (\n        <li className=\"details\" onClick={() => dispatch({ type: 'REMOVE_TASK', id: task.id })}>\n            <div>{task.title}</div>\n            <div>By: {task.creator}</div>\n        </li>\n    );\n}\n\nexport default TaskDetails;","import React, { useContext } from 'react';\nimport { TaskContext } from '../contexts/TaskContext';\nimport TaskDetails from './TaskDetails';\n\nconst TaskList = () => {\n    const { tasks } = useContext(TaskContext);\n    return tasks.length ? (\n        <div className=\"tasks\">\n            <ul>\n                {tasks.map(task => {\n                    return (<TaskDetails task={task} key={task.id} />);\n                })}\n            </ul>\n        </div>\n    ) : (\n            <div className=\"nothing\">Nothing to do</div>\n        )\n}\n\nexport default TaskList;","import { v1 as uuidv1 } from 'uuid';\n\nexport const memberReducer = (state, action) => {\n    switch (action.type) {\n        case 'ADD_MEMBER':\n            return [...state, {\n                name: action.member.name,\n                id: uuidv1()\n            }]\n        case 'REMOVE_MEMBER':\n            return state.filter(member => member.id !== action.id);\n        default:\n            return state\n    }\n}","import React, { createContext, useReducer, useEffect } from 'react';\nimport { memberReducer } from '../reducers/memberReducer';\n\nexport const MemberContext = createContext();\n\nconst MemberContextProvider = (props) => {\n    const [members, dispatch] = useReducer(memberReducer, [], () => {\n        const localData = localStorage.getItem('members');\n        return localData ? JSON.parse(localData) : [];\n    });\n    useEffect(() => {\n        localStorage.setItem('members', JSON.stringify(members))\n    }, [members])\n    return (\n        <MemberContext.Provider value={{ members, dispatch }}>\n            {props.children}\n        </MemberContext.Provider>\n    )\n}\n\nexport default MemberContextProvider;","import React, { useContext } from 'react';\nimport { MemberContext } from '../contexts/MemberContext';\n\nconst MemberDetails = ({ member }) => {\n    const { dispatch } = useContext(MemberContext);\n    return (\n        <li className=\"m-details\" onClick={() => dispatch({ type: 'REMOVE_MEMBER', id: member.id })}>\n            <div>{member.name}</div>\n        </li>\n    )\n}\n\nexport default MemberDetails;","import React, { useContext } from 'react';\n\nimport { MemberContext } from '../contexts/MemberContext';\nimport MemberDetails from './MemberDetails';\n\nconst MembersList = () => {\n    const { members } = useContext(MemberContext);\n\n    return (\n        <div className=\"members\">\n            <ul>\n                {members.map(member => {\n                    return (<MemberDetails member={member} key={member.id} />);\n                })}\n            </ul>\n\n        </div>\n    )\n}\n\nexport default MembersList;","import React, { useState, useContext } from 'react';\nimport { MemberContext } from '../contexts/MemberContext';\n\nconst NewMemberForm = () => {\n    const { dispatch } = useContext(MemberContext);\n    const [name, setName] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        dispatch({\n            type: 'ADD_MEMBER', member: {\n                name\n            }\n        });\n        setName('');\n    }\n    return (\n        <form className=\"members-form-bg\" onSubmit={handleSubmit}>\n            <h1>Members</h1>\n            <input type=\"text\" value={name} required onChange={(e) => setName(e.target.value)} placeholder=\"member\" />\n            <input className=\"button-member\" type=\"submit\" value=\"add\" />\n        </form>\n    );\n}\n\nexport default NewMemberForm;","import React from 'react';\nimport './App.css';\n\nimport TaskContextProvider from './contexts/TaskContext';\nimport Navbar from './components/Navbar';\nimport AuthContextProvider from './contexts/AuthContext';\nimport NewTaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport MemberContextProvider from './contexts/MemberContext';\nimport MembersList from './components/MemberList';\nimport NewMemberForm from './components/NewMemberForm';\n\nfunction App() {\n  return (\n    <div className=\"hooks-list\">\n      <AuthContextProvider>\n        <TaskContextProvider>\n          <Navbar />\n\n          <NewTaskForm />\n          <TaskList />\n\n        </TaskContextProvider>\n        \n        <MemberContextProvider>\n          <NewMemberForm />\n          <MembersList />\n        </MemberContextProvider>\n      </AuthContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}